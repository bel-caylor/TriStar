---
title: "Family"
layout: layouts/base.njk
permalink: "family/"
---

<div x-data="familyTableComponent()" x-init="loadData()" >

  <div class="mb-6">
    <h1 class="text-3xl font-bold text-gray-800">Edit Family Information</h1>
    <p class="mt-1 text-gray-600">
      Edit as needed, or leave it alone if all looks in order.
    </p>
  </div>

  {% include "components/family-table-responsive.njk" %}
  {% include "components/family-edit-modal.njk" %}

</div>

<script>
  function familyTableComponent() {
    return {
      // ─── State ────────────────────────────────────────────────
      employee: {},           // the full employee object (including familyMembers)
      familyMembers: [],      // alias for employee.familyMembers
      editingMember: {},      // the member we’re currently editing
      showModal: false,       // controls modal visibility
      isEdit: false,          // “Add” vs “Edit” mode

      // ─── Initialization ────────────────────────────────────────
      async loadData() {
        try {
          // Fetch the full employee‐level JSON (which contains a nested familyMembers array)
          const res = await fetch("/employee.json");
          if (!res.ok) throw new Error("Could not load employee.json");

          const data = await res.json();
          this.employee = data;
          // Copy out just the nested array, so templates can still use `familyMembers`
          this.familyMembers = Array.isArray(data.familyMembers) ? data.familyMembers : [];
        } catch (err) {
          console.error("Error loading data:", err);
        }
      },

      // ─── Modal controls ─────────────────────────────────────────
      openAdd() {
        this.isEdit = false;
        this.editingMember = {
          id: "",
          firstName: "",
          middleInitial: "",
          lastName: "",
          suffix: "",
          ssn: "",
          birthDate: "",
          relation: "",
          gender: "",
          disabled: false,
          verified: false,
          termDate: ""
        };
        this.showModal = true;
      },

      openEdit(member) {
        this.isEdit = true;
        // Deep‐clone to avoid mutating the live array until Save
        this.editingMember = JSON.parse(JSON.stringify(member));
        this.showModal = true;
      },

      closeModal() {
        this.showModal = false;
      },

      saveMember() {
        if (this.isEdit) {
          // Replace the edited member in place
          const idx = this.familyMembers.findIndex(m => m.id === this.editingMember.id);
          if (idx !== -1) {
            this.familyMembers.splice(idx, 1, JSON.parse(JSON.stringify(this.editingMember)));
          }
        } else {
          // Assign a fresh ID (timestamp‐based) and push
          const newId = Date.now().toString();
          this.editingMember.id = newId;
          this.editingMember.verified = false;
          this.familyMembers.push(JSON.parse(JSON.stringify(this.editingMember)));
        }
        this.closeModal();
      },

      removeMember(id) {
        this.familyMembers = this.familyMembers.filter(m => m.id !== id);
      }
    };
  }
</script>
